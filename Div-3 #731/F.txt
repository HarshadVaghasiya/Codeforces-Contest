#include <bits/stdc++.h>
using namespace std;
 

// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;
// #define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>


#define pb push_back
#define pob pop_back
#define S second
#define F first
#define FAST ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define vll vector<long long int>
#define pll pair<long long int,long long int>
// unordered_map<int,int>mp; mp.reserve(1024); mp.max_load_factor(0.25);
#define mod 1000000007
#define mod2 998244353
#define ll long long int
#define ld long double
#define pi 3.141592653589793238
#define Endl endl
#define endl "\n"
const ll N = 4e5 + 15;
const ll inf = 1e18;

vll a;
struct segTree
{
    vector<ll> t;
    ll n;
    segTree(ll sz)
    {
        n = sz;
        t.resize(4*n, 0);
    }
    ll merge(ll left,ll right)
    {
        ll ans = __gcd(left , right);
        return ans;
    }
    void build(ll v,ll tl,ll tr)
    {
        if(tl==tr)
        {
            t[v] = a[tl];
        }
        else
        {
            ll tm = (tl + tr)/2;
            build(2*v,tl,tm);
            build(2*v+1,tm+1,tr);
            t[v] = merge(t[2*v],t[2*v+1]);
        }
    }
    ll query(ll v,ll tl,ll tr,ll l,ll r)
    {
        if(l>r)   return 0;
        if(l==tl && r==tr)   return t[v];
        ll tm = (tl + tr)/2;
        return merge(query(v*2, tl, tm, l, min(r, tm)),query(v*2+1, tm+1, tr, max(l, tm+1), r));
    }
};

void solve()
{
        ll n;
        cin >> n;
        vll b(n);
        for(auto &x:b)
                cin >> x;
        for(ll i = 0 ; i < n ; i++)
                b.pb(b[i]);
        a = b;
        segTree st(a.size());
        st.build(1,0,2*n-1);
        ll ans = 1e9 , l = 0 , r = n;
        while(l <= r)
        {
                ll m = l + (r-l)/2;
                set<ll> s;
                for(ll i = 0 ; i < n ; i++)
                        s.insert(st.query(1,0,2*n-1,i,i+m));
                if(s.size() == 1)
                        r = m - 1 , ans = m;
                else
                        l = m + 1;
        }
        cout << ans << endl;
}        

void debug(ll tt) {}
 
signed main()
{
        FAST;
        int t = 1;
        cin >> t;
        while(t--)
        {
                solve();
        }
}
// freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);